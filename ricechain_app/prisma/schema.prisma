generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザー関連モデル
model User {
  id                 String           @id @default(uuid())
  kycProfileId       String?           @unique
  walletAddress      String           @unique
  handleName         String?
  email              String?          @unique
  iconImageUrl       String?
  bannerImageUrl     String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // リレーション
  kycStatus          KycStatus?
  komePons           KomePon[]
  shippingAddresses  ShippingAddress[]
  farmerProfile      FarmerProfile?
  cart               Cart?
  buyerOrders        Order[]          @relation("BuyerOrders")
  sellerOrders       Order[]          @relation("SellerOrders")
  reviews            Review[]
  products           Product[]
  chatMessages       ChatMessage[]
  juryVotes          JuryVote[]
  buyerDisputes      Dispute[]        @relation("BuyerDisputes")
  sellerDisputes     Dispute[]        @relation("SellerDisputes")
}

model KycStatus {
  id              String    @id @default(uuid())
  userId          String    @unique
  consumerId      String
  consumerLevel   Int       @default(0)
  farmerId        String
  farmerLevel     Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KomePon {
  id              String    @id @default(uuid())
  userId          String
  available       Boolean   @default(false)
  givenAt         DateTime
  relatedOrderId  String?
  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedOrder    Order?    @relation(fields: [relatedOrderId], references: [id])
}

model ShippingAddress {
  id              String    @id @default(uuid())
  userId          String
  name            String
  postalCode      String
  prefecture      String
  city            String
  address1        String
  address2        String?
  phoneNumber     String
  isDefault       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders          Order[]
}

model FarmerProfile {
  id              String    @id @default(uuid())
  userId          String    @unique
  farmName        String
  description     String
  location        String
  imageUrl        String
  bannerImageUrl  String?
  contactEmail    String
  rating          Float     @default(0)
  komePonRank     Int?
  komePonBudget   Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id                  String    @id @default(uuid())
  farmerId            String
  name                String
  description         String
  imageUrl            String
  price               Float
  komePonDiscountRate Float?
  stock               Int       @default(0)
  available           Boolean   @default(true)
  rating              Float     @default(0)
  reviewCount         Int       @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  farmer              User      @relation(fields: [farmerId], references: [id])
  details             ProductDetails?
  cartItems           CartItem[]
  orderItems          OrderItem[]
  reviews             Review[]
}

model ProductDetails {
  id                  String    @id @default(uuid())
  productId           String    @unique
  variety             String
  weightKg            Float

  product             Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id              String    @id @default(uuid())
  userId          String    @unique
  totalPrice      Float     @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           CartItem[]
}

model CartItem {
  id              String    @id @default(uuid())
  cartId          String
  productId       String
  quantity        Int       @default(1)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  cart            Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id                String          @id @default(uuid())
  buyerId           String
  sellerId          String
  shippingAddressId String
  status            OrderStatus     @default(pending_payment)
  subtotal          Float
  shippingFee       Float
  komePonDiscount   Float           @default(0)
  total             Float
  paymentStatus     String
  reviewSubmitted   Boolean         @default(false)
  transactionHash   String?
  shippedAt         DateTime?
  cancelledAt       DateTime?
  refundedAt        DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  buyer             User            @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller            User            @relation("SellerOrders", fields: [sellerId], references: [id])
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  items             OrderItem[]
  review            Review?
  dispute           Dispute?
  komePons          KomePon[]
}

model OrderItem {
  id              String    @id @default(uuid())
  orderId         String
  productId       String
  quantity        Int
  price           Float
  createdAt       DateTime  @default(now())

  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [productId], references: [id])
}

model Review {
  id              String    @id @default(uuid())
  productId       String
  userId          String
  orderId         String    @unique
  rating          Float
  title           String
  content         String
  imageUrls       String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  product         Product   @relation(fields: [productId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  order           Order     @relation(fields: [orderId], references: [id])
}

model Dispute {
  id              String           @id @default(uuid())
  orderId         String           @unique
  buyerId         String
  sellerId        String
  reason          String
  status          DisputeStatus    @default(pending)
  requiredJurors  Int              @default(3)
  buyerVoteCount  Int              @default(0)
  sellerVoteCount Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  order           Order            @relation(fields: [orderId], references: [id])
  buyer           User             @relation("BuyerDisputes", fields: [buyerId], references: [id])
  seller          User             @relation("SellerDisputes", fields: [sellerId], references: [id])
  chatMessages    ChatMessage[]
  juryVotes       JuryVote[]
}

model ChatMessage {
  id              String    @id @default(uuid())
  disputeId       String
  senderId        String
  message         String
  createdAt       DateTime  @default(now())

  dispute         Dispute   @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  sender          User      @relation(fields: [senderId], references: [id])
}

model JuryVote {
  id              String    @id @default(uuid())
  disputeId       String
  jurorId         String
  vote            VoteType
  confidence      Int
  createdAt       DateTime  @default(now())

  dispute         Dispute   @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  juror           User      @relation(fields: [jurorId], references: [id])

  @@unique([disputeId, jurorId])
}

// 列挙型定義
enum OrderStatus {
  pending_payment
  processing
  shipped
  delivered
  completed
  cancelled
  refunded
  dispute
  dispute_resolved
}

enum DisputeStatus {
  pending
  in_chat
  in_jury
  resolved
}

enum VoteType {
  buyer
  seller
}
